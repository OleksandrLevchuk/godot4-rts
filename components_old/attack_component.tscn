[gd_scene load_steps=5 format=3 uid="uid://cmu5q72wauwkk"]

[ext_resource type="Texture2D" uid="uid://yoseowf0t8iu" path="res://art/units/parts/turret_1.png" id="1_r24ut"]

[sub_resource type="GDScript" id="GDScript_f82ki"]
script/source = "extends BaseComponent

@export var DAMAGE : int = 5
var target : Node
@onready var aim_calculator: Node = $AimCalculator
signal attacked


func _ready():
#	unit.can.attack = true
	%Cooldown.timeout.connect(attack)
	aim_calculator.aimed.connect(_on_aimed)


func _on_ordered_to_attack( new_target ):
	print( unit, \" was ordered to attack \", new_target )
	if target == new_target: return # prevents attack cd exploit, but only on single unit
	if target: # that is, if we've already been attacking a different target
		attacked.disconnect(target.get_node(\"%HealthComponent\")._on_attacked)
		target.get_node('%HealthComponent').died.disconnect(_on_target_died)
	target = new_target
	attacked.connect(target.get_node(\"%HealthComponent\")._on_attacked)
	target.get_node('%HealthComponent').died.connect(_on_target_died)
	start_aiming()


func start_aiming():
	set_process(true)


func _process(_delta):
	rotation = aim_calculator.rotation
#	if aim.is_aimed( unit.position )


func _on_aimed():
	print(unit, \" has aimed\")
	set_process(false)
	%Cooldown.start()
	attack()


func attack():
	print(unit, \" attacks \", target)
	attacked.emit( DAMAGE )
	%BulletTrace.shoot( unit.position.distance_to( target.position ) )


func _on_target_died():
	print( unit, ' killed ', target )
	target.get_node('%HealthComponent').died.disconnect(_on_target_died)
	attacked.disconnect(target.get_node(\"%HealthComponent\")._on_attacked)
	target = null
	%Cooldown.stop()
"

[sub_resource type="GDScript" id="GDScript_qhcju"]
script/source = "extends Line2D

@export var FRAMES_DURATION: int = 4

var frames_left: int


func shoot( distance: float ):
	frames_left = FRAMES_DURATION
#	points[0] = origin
	points[1].x = distance
	visible = true
	set_process(true)


func _process( _delta ):
	frames_left -= 1
	if frames_left == 0:
		set_process(false)
		visible = false
"

[sub_resource type="GDScript" id="GDScript_6jemm"]
script/source = "## aim calculator
extends Node

var angle_wanted: float
var which_side: float
var rotation: float

@export var ROTATION_PER_SEC_DEG: float = 45
@onready var ROTATION_PER_SEC: float = deg_to_rad( ROTATION_PER_SEC_DEG )
signal aimed


func start( origin: Vector2, destination: Vector2 ):
	angle_wanted = origin.angle_to_point( destination )
	# cross product of two vectors becomes 0 when they're looking towards each other
	var cross = origin.cross( destination )
	# the sign of the cross product is negative when the second vector is to the left of the first
	which_side = sign( cross )
	print('aiming started')


func calculate( delta: float ) -> float:
	var new_angle: float = ROTATION_PER_SEC * delta * which_side
	if new_angle == angle_wanted:
		aimed.emit()
	print('calculated')
	return new_angle
"

[node name="AttackComponent" type="Node2D"]
script = SubResource("GDScript_f82ki")

[node name="Cooldown" type="Timer" parent="."]
unique_name_in_owner = true

[node name="TurretSprite" type="Sprite2D" parent="."]
unique_name_in_owner = true
rotation = 1.5708
scale = Vector2(0.125, 0.125)
texture = ExtResource("1_r24ut")
offset = Vector2(0, -100)

[node name="BulletTrace" type="Line2D" parent="."]
unique_name_in_owner = true
visible = false
position = Vector2(45, -3)
points = PackedVector2Array(54, 0, 0, 0)
width = 2.0
script = SubResource("GDScript_qhcju")

[node name="AimCalculator" type="Node" parent="."]
script = SubResource("GDScript_6jemm")
