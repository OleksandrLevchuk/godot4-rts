[gd_scene load_steps=6 format=3 uid="uid://vn2pj1fllvl8"]

[ext_resource type="Theme" uid="uid://ccb7csnxqndm6" path="res://ui/my_ui_theme.tres" id="2_yweqt"]

[sub_resource type="GDScript" id="GDScript_30ktc"]
script/source = "extends Node2D

var is_temporary_visible: bool = false
var is_selected: bool = false
@export var MAX_HEALTH: float = 3
@onready var health: float = MAX_HEALTH

signal died


func _ready():
	%HPBar.max_value = MAX_HEALTH
	%HPBar.value = MAX_HEALTH
	# when a unit takes damage, display the hp bar temporarily
	$TemporaryVisibilityTimer.timeout.connect(_on_temporary_visibility_end)
	# upon dying, wait a little before removing the unit
	died.connect(func():
		get_tree().create_timer(3).timeout.connect(get_owner().queue_free)
	)


func _on_attacked( dmg ):
	$TemporaryVisibilityTimer.start()
	visible = true
	is_temporary_visible = true
	health = max( health - dmg, 0 )
	%HPBar.value = health
	# the line works in percentages, between 0 and 1
	%Line.animate_to( health / MAX_HEALTH )
	print(\"%s lost %s hit points, %s left.\" % [get_owner(), dmg, health])
	if health <= 0:
		died.emit()


func _on_temporary_visibility_end():
	is_temporary_visible = false
	if health == 0:
		queue_free()
	if not is_selected:
		visible = false


func _on_selected():
	is_selected = true
	visible = true


func _on_deselected():
	is_selected = false
	if not is_temporary_visible:
		visible = false
"

[sub_resource type="GDScript" id="GDScript_aifk4"]
script/source = "extends Node2D
# if this unit is movable, make the UI parent top level
# in order to keep ui elements from rotating with the unit


func _ready():
	if get_owner().has_node(\"%MovementComponent\"):
		top_level = true
"

[sub_resource type="GDScript" id="GDScript_thyfq"]
script/source = "extends RemoteTransform2D
# if this unit is stationary, this node is useless, so delete it


func _ready():
	if not get_owner().has_node(\"%MovementComponent\"):
		queue_free()
"

[sub_resource type="GDScript" id="GDScript_574ft"]
script/source = "extends Line2D

var anchor_id: int = 1 # 0 for left side point of the curve
var health: float = 1
var prev_health: float = 1

var left: float:
	set(x):
		left = x
		points[0].x = x * size

var right: float:
	set(x):
		right = x
		points[1].x = x * size

@onready var size: int = %HPBar.get_size().x


func _ready():
	set_process(false)
	$Ease.timeout.connect(func(): 
		visible = false
		set_process(false)
	)
	left = 1
	right = 1


func _process(_delta):
	points[anchor_id].x = size * lerp( health, prev_health, $Ease.time_left/$Ease.wait_time )


func animate_to( new_value ):
	print('animating to ', new_value)
	visible = true
	$Ease.start()
	if new_value>health: # it's healing
		anchor_id = 0 # so, left point gets animated
		right = new_value # while right stays fixed
	else: # it's damage
		anchor_id = 1 # right point gets animated
		left = new_value # while left stays fixed
	prev_health = health
	health = new_value
	set_process(true)
"

[node name="HealthComponent" type="Node2D"]
script = SubResource("GDScript_30ktc")

[node name="TemporaryVisibilityTimer" type="Timer" parent="."]
wait_time = 2.445
one_shot = true

[node name="UIParent" type="Node2D" parent="."]
script = SubResource("GDScript_aifk4")

[node name="RemoteTransform2D" type="RemoteTransform2D" parent="."]
remote_path = NodePath("../UIParent")
update_rotation = false
update_scale = false
script = SubResource("GDScript_thyfq")

[node name="HPBar" type="ProgressBar" parent="."]
unique_name_in_owner = true
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -35.0
offset_top = -40.0
offset_right = 35.0
offset_bottom = -36.0
grow_horizontal = 2
theme = ExtResource("2_yweqt")
value = 80.0
show_percentage = false
metadata/_edit_use_anchors_ = true

[node name="Line" type="Line2D" parent="HPBar"]
unique_name_in_owner = true
visible = false
position = Vector2(0, 2)
points = PackedVector2Array(0, 0, 70, 0)
width = 4.0
script = SubResource("GDScript_574ft")

[node name="Ease" type="Timer" parent="HPBar/Line"]
wait_time = 0.734
one_shot = true
